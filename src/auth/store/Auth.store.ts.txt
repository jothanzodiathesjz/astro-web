import { defineStore } from 'pinia';
import { ref, computed } from 'vue';

export const useAuthStore = defineStore('auth', () => {
  const accessToken = ref(localStorage.getItem('accessToken') || null);
  const refreshToken = ref(localStorage.getItem('refreshToken') || null);
  const user = ref(JSON.parse(localStorage.getItem('user') || 'null'));

  const isAuthenticated = computed(() => !!accessToken.value);

  function setTokens(access: string, refresh: string) {
    accessToken.value = access;
    refreshToken.value = refresh;
    localStorage.setItem('accessToken', access);
    localStorage.setItem('refreshToken', refresh);
  }

  function setUser(userData: any) {
    user.value = userData;
    localStorage.setItem('user', JSON.stringify(userData));
  }

  function clearAuthData() {
    accessToken.value = null;
    refreshToken.value = null;
    user.value = null;
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user');
  }

  const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

  // Tambahkan fungsi login ke dalam store
  async function login(credentials: { email: string; password: string }) {
    try {
      // Panggil API login
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
      });

      if (!response.ok) {
        throw new Error('Login failed. Invalid credentials.');
      }

      const data = await response.json();

      // Simpan token dan data pengguna di store dan localStorage
      setTokens(data.accessToken, data.refreshToken);
      setUser(data.user);

      return true; // Berhasil
    } catch (error) {
      console.error('Login error:', error);
      clearAuthData(); // Pastikan data bersih jika gagal
      return false; // Gagal
    }
  }

  return {
    accessToken, refreshToken, user, isAuthenticated, setTokens, setUser, clearAuthData, login,
    logout: clearAuthData,
  };
});